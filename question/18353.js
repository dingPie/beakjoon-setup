// // 3. 여러 줄의 값들을 입력받을 때
const fileName = __filename.split("/question/")[1].split(".js")[0];
const dir = `../test/${fileName}.txt`;
// const dir = "/dev/stdin";

const fs = require("fs");
const input = fs.readFileSync(dir).toString().trim().split("\n");

const cnt = Number(input[0]);
const numbers = input[1].split(" ").map((v) => Number(v));

const dp = Array(cnt).fill(1);

for (let i = 1; i < cnt; i++) {
  for (let j = 0; j < i; j++) {
    if (numbers[i] < numbers[j] && dp[i] <= dp[j]) {
      dp[i] = dp[j] + 1;
    }
  }
}

console.log(cnt - Math.max(...dp));

// 각 index마다 현재 찾아야 할 index (i) 까지 j를 돌리면서 비교해준다.
// 중간에 i보다 더 작은 값이 있더라도 건너뛰게 되는 셈이니까 아무런 문제 없다.
// 건너뛰는것 = 병사를 빼는것과 같은 말이다.

// 15 11 4 8 5 2 4 로 예를 들어보자.
// 11부터 시작, dp는 모두 1로 초기화.

// 타겟(i) -> 11
// 11보다 15가 작고, dp[i]또한 1로 dp[j]와 같으므로 dp[i] = 1 + 1
// [1, 2, 1, 1, 1, 1, 1]

// 타겟(i) -> 4
// 4는 15(j)보다 작다. 15의 dp인 1에 1을 더해준다 (현재 2)
// 4는 11보다 작다. 11의 dp인 2에 1을 더해준다. (현재 3)
// [1, 2, 3, 1, 1, 1, 1]

// 타겟(i) -> 8
// 8는 15(j)보다 작다. 15의 dp인 1에 1을 더해준다 (현재 2)
// 8는 11보다 작다. 11의 dp인 2에 1을 더해준다. (현재 3)
// 8은 4보다 크다. 그대로 넘어간다. (현재 3)
// [1, 2, 3, 3, 1, 1, 1]

// 타겟(i) -> 5
// 5는 15(j)보다 작다. 15의 dp인 1에 1을 더해준다 (현재 2)
// 5는 11보다 작다. 11의 dp인 2에 1을 더해준다. (현재 3)
// 5은 4보다 크다. 그대로 넘어간다.(현재 3)
// 5은 8보다 작다. 8의 dp인 3에 1을 더해준다. (현재 4)
// [1, 2, 3, 3, 4, 1, 1]

// 타겟(i) -> 2
// 2는 15(j)보다 작다. 15의 dp인 1에 1을 더해준다 (현재 2)
// 2는 11보다 작다. 11의 dp인 2에 1을 더해준다. (현재 3)
// 2은 4보다 작다. 4의 dp인 3에 1을 더해준다. (현재 4)
// 2은 8보다 작다. 그러나 8의 dp는 3이므로, 더해줄 필요가 없다. 그대로 넘어간다. (현재 4)
// 2은 5보다 작다. 5의 dp인 4에 1을 더해준다. (현재 5)
// [1, 2, 3, 3, 4, 5, 1]

// 타겟(i) -> 4
// 4는 15(j)보다 작다. 15의 dp인 1에 1을 더해준다 (현재 2)
// 4는 11보다 작다. 11의 dp인 2에 1을 더해준다. (현재 3)
// 4은 4보다 작지 않다. 넘어간다.(현재 3)
// 4은 8보다 작다. 8의 dp인 3에 1을 더해준다. (현재 4)
// 4은 5보다 작다. 5의 dp인 4에 1을 더해준다. (현재 5)
// [1, 2, 3, 3, 4, 5, 5]
